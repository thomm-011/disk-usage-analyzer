#!/bin/bash

# Auto-diagn√≥stico e corre√ß√£o para problemas intermitentes

echo "ü§ñ Auto-Fix: Disk Usage Analyzer"
echo "================================"

WSL_IP=$(hostname -I | awk '{print $1}')
PORT=8080

# Fun√ß√£o para testar conectividade
test_connectivity() {
    local url=$1
    local name=$2
    
    if curl -s --connect-timeout 3 "$url" >/dev/null 2>&1; then
        echo "‚úÖ $name: OK"
        return 0
    else
        echo "‚ùå $name: FALHA"
        return 1
    fi
}

# Fun√ß√£o para iniciar servidor
start_server() {
    local port=$1
    echo "üöÄ Iniciando servidor na porta $port..."
    
    cd /home/thomas/disk-usage-analyzer
    
    # Matar processos antigos
    pkill -f "python.*$port" 2>/dev/null || true
    sleep 1
    
    # Iniciar servidor debug em background
    python3 debug_web.py --host 0.0.0.0 --port $port > /tmp/server_$port.log 2>&1 &
    local pid=$!
    
    # Aguardar inicializa√ß√£o
    sleep 3
    
    # Verificar se est√° rodando
    if kill -0 $pid 2>/dev/null; then
        echo "‚úÖ Servidor iniciado (PID: $pid)"
        return 0
    else
        echo "‚ùå Falha ao iniciar servidor"
        return 1
    fi
}

echo "üîç Diagn√≥stico autom√°tico..."
echo "IP WSL2: $WSL_IP"
echo ""

# 1. Verificar se j√° h√° servidor rodando
echo "1Ô∏è‚É£ Verificando servidores existentes..."
if ss -tuln | grep ":$PORT " >/dev/null 2>&1; then
    echo "‚ö†Ô∏è Porta $PORT em uso. Testando conectividade..."
    
    if test_connectivity "http://localhost:$PORT/health" "localhost:$PORT"; then
        echo "‚úÖ Servidor j√° funcionando!"
        echo "üåê Acesse: http://$WSL_IP:$PORT"
        exit 0
    else
        echo "üßπ Servidor n√£o responde. Reiniciando..."
        pkill -f "python.*$PORT" 2>/dev/null || true
        sleep 2
    fi
else
    echo "‚úÖ Porta $PORT livre"
fi

# 2. Verificar depend√™ncias
echo ""
echo "2Ô∏è‚É£ Verificando depend√™ncias..."
if python3 -c "import flask, plotly" 2>/dev/null; then
    echo "‚úÖ Depend√™ncias OK"
else
    echo "üì¶ Instalando depend√™ncias..."
    pip3 install --user flask plotly pandas 2>/dev/null
fi

# 3. Tentar iniciar servidor
echo ""
echo "3Ô∏è‚É£ Iniciando servidor..."
if start_server $PORT; then
    echo "‚úÖ Servidor iniciado com sucesso!"
else
    echo "‚ö†Ô∏è Tentando porta alternativa..."
    PORT=8081
    if start_server $PORT; then
        echo "‚úÖ Servidor iniciado na porta alternativa!"
    else
        echo "‚ùå Falha ao iniciar servidor"
        exit 1
    fi
fi

# 4. Testar conectividade
echo ""
echo "4Ô∏è‚É£ Testando conectividade..."
sleep 2

test_connectivity "http://localhost:$PORT" "localhost"
test_connectivity "http://$WSL_IP:$PORT" "WSL IP"

# 5. Mostrar informa√ß√µes finais
echo ""
echo "üéâ Servidor funcionando!"
echo "üìç URLs de acesso:"
echo "   üêß No WSL2:    http://localhost:$PORT"
echo "   ü™ü No Windows: http://$WSL_IP:$PORT"
echo ""
echo "üí° Comandos √∫teis:"
echo "   Testar: curl http://$WSL_IP:$PORT/health"
echo "   Parar:  pkill -f 'python.*$PORT'"
echo ""
echo "üìÑ Log do servidor: /tmp/server_$PORT.log"

# 6. Manter servidor rodando
echo "üîÑ Monitorando servidor... (Ctrl+C para parar)"
while true; do
    if ! ss -tuln | grep ":$PORT " >/dev/null 2>&1; then
        echo "‚ö†Ô∏è Servidor parou. Reiniciando..."
        start_server $PORT
    fi
    sleep 10
done
